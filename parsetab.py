
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'STRING ID PLUS REST TIMES DIVIDE GREATER GREATERAND LESSER LESSERAND SAME NOTSAME NOT EQUAL LEFTBR RIGHTBR LEFTPAR RIGHTPAR LEFTSQR RIGHTSQR COLON SEMICOLON COMMA CTEINT CTEFLOAT CTECHAR PROGRAM MAIN FUNCTION VARS INT FLOAT CHAR STR RETURN READ WRITE AND OR IF THEN ELSE WHILE DO FOR TO VOID TRUE FALSE MEDIA MEDIANA MODA VARIANZA STDEV PLOTXY\n    program : PROGRAM neuraladdfuncdir varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR neuralmainjump statutes RIGHTBR\n    \n    neuraladdfuncdir : ID SEMICOLON\n    \n    neuralmainjump :\n    \n    varsgl : VARS vars \n            | empty\n    \n    vars : typing COLON neuralinsertvar varsarr varsmul vars\n            | empty\n    \n    neuralinsertvar : ID\n    \n    varsmul : SEMICOLON\n            | COMMA neuralinsertvar varsarr varsmul\n    \n    varsarr : neuralinitdim CTEINT neuralenddim\n            | empty\n    \n    neuralenddim : RIGHTSQR\n    \n    neuralinitdim : LEFTSQR\n    \n    idarray : neuralinitarray exp verify RIGHTSQR\n            | empty\n    \n    neuralinitarray : LEFTSQR\n    \n    verify : \n    \n    typing : INT\n            | FLOAT\n            | CHAR\n    \n    modules : FUNCTION functype neuralinsertfuncs funcparam\n            | empty\n    \n    neuralinsertfuncs : ID\n    \n    funcparam : LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR neuralinitfuncs statutes RIGHTBR neuralfuncsize neuralendfuncs modules\n    \n    neuralendfuncs :\n    \n    neuralfuncsize :\n    \n    neuralinitfuncs :\n    \n    functype : VOID\n            | typing\n    \n    parameters : typing COLON neuralinsertparam idarray mulparams\n                | empty\n    \n    neuralinsertparam : ID\n    \n    mulparams : COMMA parameters\n                | empty\n    \n    statutes : assign statuteaux\n            | reading statuteaux\n            | writing statuteaux\n            | returning statuteaux\n            | ifing statuteaux\n            | whiling statuteaux\n            | foring statuteaux\n            | exp statuteaux\n            | media statuteaux\n            | plotxy statuteaux\n            | mediana statuteaux\n            | moda statuteaux\n            | variance statuteaux\n            | stdev statuteaux\n    \n    statuteaux : statutes\n                | empty\n    \n    media : MEDIA LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON\n    \n    mediana : MEDIANA LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON\n    \n    moda : MODA LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON\n    \n    stdev : STDEV LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON\n    \n    variance : VARIANZA LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON\n    \n    plotxy : PLOTXY LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON\n    \n    specialfunclist : \n    \n    specfuncnumbers : CTEINT neuralnum mulnumeros\n                    | CTEFLOAT neuralnum mulnumeros\n    \n    neuralnum :\n    \n    mulnumeros : COMMA specfuncnumbers\n                | empty\n    \n    assign : neuralassign idarray neuralassign2 assignexp SEMICOLON\n    \n    neuralassign : ID\n    \n    neuralassign2 : EQUAL\n    \n    assignexp : exp\n    \n    returning : RETURN LEFTPAR exp RIGHTPAR SEMICOLON\n    \n    reading : READ LEFTPAR neuralreadid idarray mulread RIGHTPAR SEMICOLON\n    \n    neuralreadid : ID\n    \n    mulread : COMMA neuralreadid idarray mulread\n            | empty\n    \n    writing : WRITE LEFTPAR neuralwrite mulwrite RIGHTPAR SEMICOLON\n    \n    neuralwrite : writetype\n                | exp\n    \n    writetype : STRING\n            | CTECHAR\n    \n    mulwrite : COMMA neuralwrite mulwrite\n            | empty\n    \n    ifing : IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing\n    \n    elsing : neuralelse LEFTBR statutes RIGHTBR\n            | empty\n    \n    neuralelse : ELSE \n    \n    neuralif : RIGHTPAR\n    \n    whiling : neuralwhile LEFTPAR exp neuralwhile2 DO LEFTBR statutes RIGHTBR\n    \n    neuralwhile : WHILE\n    \n    neuralwhile2 : RIGHTPAR\n    \n    foring : FOR neuralfor idarray EQUAL exp neuralfor2 exp neuralfor3 LEFTBR statutes RIGHTBR\n    \n    neuralfor : ID\n    \n    neuralfor2 : TO\n    \n    neuralfor3 : DO\n    \n    exp : andexp exp1\n    \n    exp1 : OR exp\n        | empty\n    \n    andexp : boolexp andexp1\n    \n    andexp1 : neuraland andexp\n            | empty\n    \n    neuraland : AND\n    \n    boolexp : arithexp boolexp1\n    \n    boolexp1 : neuralbool arithexp\n            | empty\n    \n    neuralbool : GREATER\n                | GREATERAND\n                | LESSER\n                | LESSERAND\n                | SAME\n                | NOTSAME\n                | NOT\n    \n    arithexp : geoexp arithexp1\n    \n    arithexp1 : neuralarith arithexp\n                | empty\n    \n    neuralarith : PLUS\n                | REST\n    \n    geoexp : finexp geoexp1\n    \n    geoexp1 : neuralgeo geoexp\n            | empty\n    \n    neuralgeo : TIMES\n            | DIVIDE\n    \n    addbottom : LEFTPAR\n    \n    popbottom : RIGHTPAR\n    \n    finexp : addbottom exp popbottom\n            | cteexp\n    \n    cteexp : CTEINT\n            | CTEFLOAT\n            | CTECHAR\n            | ID neuralexist paramsexp\n    \n    neuralexist : \n    \n    paramsexp : LEFTPAR neuralera paramsexp2 neuralpar\n            | idarray\n    \n    paramsexp2 : exp neuralpar2 mulparamsexp\n                | empty \n    \n    neuralpar : RIGHTPAR\n    \n    neuralera : \n    \n    neuralpar2 :\n    \n    mulparamsexp : COMMA exp neuralpar2 mulparamsexp\n                | empty\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'neuraladdfuncdir':([2,],[3,]),'varsgl':([3,91,],[5,159,]),'empty':([3,5,6,26,30,39,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,73,82,83,84,85,91,92,121,132,160,165,167,196,201,212,213,219,228,248,264,267,276,281,287,],[7,11,14,33,38,14,33,98,98,98,98,98,98,98,98,98,98,98,98,98,98,114,125,135,139,149,154,7,114,114,114,197,114,204,38,226,236,236,245,204,114,273,226,284,11,273,]),'modules':([5,281,],[9,288,]),'vars':([6,39,],[12,46,]),'typing':([6,10,30,39,196,],[13,21,37,13,37,]),'functype':([10,],[19,]),'neuralinsertfuncs':([19,],[24,]),'neuralinsertvar':([22,41,],[26,47,]),'funcparam':([24,],[29,]),'varsarr':([26,47,],[31,94,]),'neuralinitdim':([26,47,],[32,32,]),'parameters':([30,196,],[36,221,]),'varsmul':([31,94,],[39,161,]),'neuralmainjump':([35,],[43,]),'neuralenddim':([42,],[48,]),'statutes':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[51,97,97,97,97,97,97,97,97,97,97,97,97,97,97,246,268,269,290,292,]),'assign':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'reading':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'writing':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'returning':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'ifing':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'whiling':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'foring':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'exp':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,86,113,117,118,119,120,124,162,203,210,219,220,251,252,253,272,286,289,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,157,164,169,172,173,174,176,199,169,232,244,59,59,59,270,280,59,59,]),'media':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'plotxy':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'mediana':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'moda':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'variance':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'stdev':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'neuralassign':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'neuralwhile':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,220,251,252,286,289,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'andexp':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,86,113,117,118,119,120,124,134,162,203,210,219,220,251,252,253,272,286,289,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,188,73,73,73,73,73,73,73,73,73,73,73,]),'boolexp':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,86,113,117,118,119,120,124,134,162,203,210,219,220,251,252,253,272,286,289,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'arithexp':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,86,113,117,118,119,120,124,134,138,148,162,203,210,219,220,251,252,253,272,286,289,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,189,190,83,83,83,83,83,83,83,83,83,83,83,]),'geoexp':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,86,113,117,118,119,120,124,134,138,148,153,162,203,210,219,220,251,252,253,272,286,289,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,191,84,84,84,84,84,84,84,84,84,84,84,]),'finexp':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,86,113,117,118,119,120,124,134,138,148,153,162,203,210,219,220,251,252,253,272,286,289,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'addbottom':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,86,113,117,118,119,120,124,134,138,148,153,162,203,210,219,220,251,252,253,272,286,289,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'cteexp':([43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,86,113,117,118,119,120,124,134,138,148,153,162,203,210,219,220,251,252,253,272,286,289,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'neuralinsertparam':([45,],[92,]),'statuteaux':([52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[96,99,100,101,102,103,104,105,106,107,108,109,110,111,]),'idarray':([66,92,121,132,165,248,],[112,160,175,187,201,267,]),'neuralinitarray':([66,92,121,132,165,248,],[113,113,113,113,113,113,]),'neuralfor':([72,],[121,]),'exp1':([73,],[123,]),'neuralexist':([80,158,],[132,132,]),'andexp1':([82,],[133,]),'neuraland':([82,],[134,]),'boolexp1':([83,],[137,]),'neuralbool':([83,],[138,]),'arithexp1':([84,],[147,]),'neuralarith':([84,],[148,]),'geoexp1':([85,],[152,]),'neuralgeo':([85,],[153,]),'neuralassign2':([112,],[162,]),'neuralreadid':([116,225,],[165,248,]),'neuralwrite':([117,203,],[167,228,]),'writetype':([117,203,],[168,168,]),'specfuncnumbers':([126,127,128,129,130,131,235,],[177,180,181,182,183,184,256,]),'paramsexp':([132,],[185,]),'popbottom':([157,],[192,]),'mulparams':([160,],[195,]),'assignexp':([162,],[198,]),'verify':([164,],[200,]),'mulwrite':([167,228,],[202,250,]),'neuralif':([173,],[206,]),'neuralwhile2':([174,],[208,]),'neuralnum':([178,179,],[212,213,]),'neuralera':([186,],[219,]),'neuralinitfuncs':([194,],[220,]),'mulread':([201,267,],[224,275,]),'specialfunclist':([211,214,215,216,217,218,],[233,238,239,240,241,242,]),'mulnumeros':([212,213,],[234,237,]),'paramsexp2':([219,],[243,]),'neuralfor2':([232,],[253,]),'neuralpar':([243,],[262,]),'neuralpar2':([244,280,],[264,287,]),'mulparamsexp':([264,287,],[271,291,]),'neuralfuncsize':([265,],[274,]),'neuralfor3':([270,],[278,]),'neuralendfuncs':([274,],[281,]),'elsing':([276,],[282,]),'neuralelse':([276,],[283,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM neuraladdfuncdir varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR neuralmainjump statutes RIGHTBR','program',11,'p_PROGRAM','myLexerParserv2.py',573),
  ('neuraladdfuncdir -> ID SEMICOLON','neuraladdfuncdir',2,'p_NEURALADDFUNCDIR','myLexerParserv2.py',591),
  ('neuralmainjump -> <empty>','neuralmainjump',0,'p_NEURALMAINJUMP','myLexerParserv2.py',604),
  ('varsgl -> VARS vars','varsgl',2,'p_VARSGL','myLexerParserv2.py',619),
  ('varsgl -> empty','varsgl',1,'p_VARSGL','myLexerParserv2.py',620),
  ('vars -> typing COLON neuralinsertvar varsarr varsmul vars','vars',6,'p_VARS','myLexerParserv2.py',625),
  ('vars -> empty','vars',1,'p_VARS','myLexerParserv2.py',626),
  ('neuralinsertvar -> ID','neuralinsertvar',1,'p_NEURALINSERTVAR','myLexerParserv2.py',631),
  ('varsmul -> SEMICOLON','varsmul',1,'p_VARSMUL','myLexerParserv2.py',641),
  ('varsmul -> COMMA neuralinsertvar varsarr varsmul','varsmul',4,'p_VARSMUL','myLexerParserv2.py',642),
  ('varsarr -> neuralinitdim CTEINT neuralenddim','varsarr',3,'p_VARSARR','myLexerParserv2.py',650),
  ('varsarr -> empty','varsarr',1,'p_VARSARR','myLexerParserv2.py',651),
  ('neuralenddim -> RIGHTSQR','neuralenddim',1,'p_NEURALENDDIM','myLexerParserv2.py',657),
  ('neuralinitdim -> LEFTSQR','neuralinitdim',1,'p_NEURALINITDIM','myLexerParserv2.py',672),
  ('idarray -> neuralinitarray exp verify RIGHTSQR','idarray',4,'p_IDARRAY','myLexerParserv2.py',686),
  ('idarray -> empty','idarray',1,'p_IDARRAY','myLexerParserv2.py',687),
  ('neuralinitarray -> LEFTSQR','neuralinitarray',1,'p_NEURALINITARRAT','myLexerParserv2.py',704),
  ('verify -> <empty>','verify',0,'p_VERIFY','myLexerParserv2.py',720),
  ('typing -> INT','typing',1,'p_TYPING','myLexerParserv2.py',737),
  ('typing -> FLOAT','typing',1,'p_TYPING','myLexerParserv2.py',738),
  ('typing -> CHAR','typing',1,'p_TYPING','myLexerParserv2.py',739),
  ('modules -> FUNCTION functype neuralinsertfuncs funcparam','modules',4,'p_MODULES','myLexerParserv2.py',750),
  ('modules -> empty','modules',1,'p_MODULES','myLexerParserv2.py',751),
  ('neuralinsertfuncs -> ID','neuralinsertfuncs',1,'p_NEURALINSERTFUNCS','myLexerParserv2.py',756),
  ('funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR neuralinitfuncs statutes RIGHTBR neuralfuncsize neuralendfuncs modules','funcparam',12,'p_FUNCPARAM','myLexerParserv2.py',769),
  ('neuralendfuncs -> <empty>','neuralendfuncs',0,'p_NEURALENDFUNCS','myLexerParserv2.py',777),
  ('neuralfuncsize -> <empty>','neuralfuncsize',0,'p_NEURALFUNCSIZE','myLexerParserv2.py',787),
  ('neuralinitfuncs -> <empty>','neuralinitfuncs',0,'p_NEURALINITFUNCS','myLexerParserv2.py',802),
  ('functype -> VOID','functype',1,'p_FUNCTYPE','myLexerParserv2.py',810),
  ('functype -> typing','functype',1,'p_FUNCTYPE','myLexerParserv2.py',811),
  ('parameters -> typing COLON neuralinsertparam idarray mulparams','parameters',5,'p_PARAMETERS','myLexerParserv2.py',822),
  ('parameters -> empty','parameters',1,'p_PARAMETERS','myLexerParserv2.py',823),
  ('neuralinsertparam -> ID','neuralinsertparam',1,'p_NEURALINSERTPARAM','myLexerParserv2.py',829),
  ('mulparams -> COMMA parameters','mulparams',2,'p_MULPARAMS','myLexerParserv2.py',842),
  ('mulparams -> empty','mulparams',1,'p_MULPARAMS','myLexerParserv2.py',843),
  ('statutes -> assign statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',851),
  ('statutes -> reading statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',852),
  ('statutes -> writing statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',853),
  ('statutes -> returning statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',854),
  ('statutes -> ifing statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',855),
  ('statutes -> whiling statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',856),
  ('statutes -> foring statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',857),
  ('statutes -> exp statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',858),
  ('statutes -> media statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',859),
  ('statutes -> plotxy statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',860),
  ('statutes -> mediana statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',861),
  ('statutes -> moda statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',862),
  ('statutes -> variance statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',863),
  ('statutes -> stdev statuteaux','statutes',2,'p_STATUTES','myLexerParserv2.py',864),
  ('statuteaux -> statutes','statuteaux',1,'p_STATUTEAUX','myLexerParserv2.py',869),
  ('statuteaux -> empty','statuteaux',1,'p_STATUTEAUX','myLexerParserv2.py',870),
  ('media -> MEDIA LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON','media',6,'p_MEDIA','myLexerParserv2.py',876),
  ('mediana -> MEDIANA LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON','mediana',6,'p_MEDIANA','myLexerParserv2.py',881),
  ('moda -> MODA LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON','moda',6,'p_MODA','myLexerParserv2.py',886),
  ('stdev -> STDEV LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON','stdev',6,'p_STDEV','myLexerParserv2.py',891),
  ('variance -> VARIANZA LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON','variance',6,'p_VARIANCE','myLexerParserv2.py',896),
  ('plotxy -> PLOTXY LEFTPAR specfuncnumbers RIGHTPAR specialfunclist SEMICOLON','plotxy',6,'p_PLOTXY','myLexerParserv2.py',901),
  ('specialfunclist -> <empty>','specialfunclist',0,'p_SPECIALFUNCLIST','myLexerParserv2.py',906),
  ('specfuncnumbers -> CTEINT neuralnum mulnumeros','specfuncnumbers',3,'p_SPECFUNCNUMBERS','myLexerParserv2.py',911),
  ('specfuncnumbers -> CTEFLOAT neuralnum mulnumeros','specfuncnumbers',3,'p_SPECFUNCNUMBERS','myLexerParserv2.py',912),
  ('neuralnum -> <empty>','neuralnum',0,'p_NEURALNUM','myLexerParserv2.py',917),
  ('mulnumeros -> COMMA specfuncnumbers','mulnumeros',2,'p_MULNUMEROS','myLexerParserv2.py',922),
  ('mulnumeros -> empty','mulnumeros',1,'p_MULNUMEROS','myLexerParserv2.py',923),
  ('assign -> neuralassign idarray neuralassign2 assignexp SEMICOLON','assign',5,'p_ASSIGN','myLexerParserv2.py',931),
  ('neuralassign -> ID','neuralassign',1,'p_NEURALASSIGN','myLexerParserv2.py',944),
  ('neuralassign2 -> EQUAL','neuralassign2',1,'p_NEURALASSIGN2','myLexerParserv2.py',954),
  ('assignexp -> exp','assignexp',1,'p_ASSIGNEXP','myLexerParserv2.py',961),
  ('returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON','returning',5,'p_RETURNING','myLexerParserv2.py',972),
  ('reading -> READ LEFTPAR neuralreadid idarray mulread RIGHTPAR SEMICOLON','reading',7,'p_READING','myLexerParserv2.py',987),
  ('neuralreadid -> ID','neuralreadid',1,'p_NUERALREADID','myLexerParserv2.py',992),
  ('mulread -> COMMA neuralreadid idarray mulread','mulread',4,'p_MULREAD','myLexerParserv2.py',1000),
  ('mulread -> empty','mulread',1,'p_MULREAD','myLexerParserv2.py',1001),
  ('writing -> WRITE LEFTPAR neuralwrite mulwrite RIGHTPAR SEMICOLON','writing',6,'p_WRITING','myLexerParserv2.py',1009),
  ('neuralwrite -> writetype','neuralwrite',1,'p_NEURALWRITE','myLexerParserv2.py',1014),
  ('neuralwrite -> exp','neuralwrite',1,'p_NEURALWRITE','myLexerParserv2.py',1015),
  ('writetype -> STRING','writetype',1,'p_WRITETYPE','myLexerParserv2.py',1023),
  ('writetype -> CTECHAR','writetype',1,'p_WRITETYPE','myLexerParserv2.py',1024),
  ('mulwrite -> COMMA neuralwrite mulwrite','mulwrite',3,'p_MULWRITE','myLexerParserv2.py',1031),
  ('mulwrite -> empty','mulwrite',1,'p_MULWRITE','myLexerParserv2.py',1032),
  ('ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing','ifing',9,'p_IFING','myLexerParserv2.py',1043),
  ('elsing -> neuralelse LEFTBR statutes RIGHTBR','elsing',4,'p_ELSING','myLexerParserv2.py',1053),
  ('elsing -> empty','elsing',1,'p_ELSING','myLexerParserv2.py',1054),
  ('neuralelse -> ELSE','neuralelse',1,'p_NEURALELSE','myLexerParserv2.py',1059),
  ('neuralif -> RIGHTPAR','neuralif',1,'p_NEURALIF','myLexerParserv2.py',1071),
  ('whiling -> neuralwhile LEFTPAR exp neuralwhile2 DO LEFTBR statutes RIGHTBR','whiling',8,'p_WHILING','myLexerParserv2.py',1087),
  ('neuralwhile -> WHILE','neuralwhile',1,'p_NEURALWHILE','myLexerParserv2.py',1099),
  ('neuralwhile2 -> RIGHTPAR','neuralwhile2',1,'p_NEURALWHILE2','myLexerParserv2.py',1106),
  ('foring -> FOR neuralfor idarray EQUAL exp neuralfor2 exp neuralfor3 LEFTBR statutes RIGHTBR','foring',11,'p_FORING','myLexerParserv2.py',1123),
  ('neuralfor -> ID','neuralfor',1,'p_NEURALFOR','myLexerParserv2.py',1140),
  ('neuralfor2 -> TO','neuralfor2',1,'p_NEURALFOR2','myLexerParserv2.py',1151),
  ('neuralfor3 -> DO','neuralfor3',1,'p_NEURALFOR3','myLexerParserv2.py',1163),
  ('exp -> andexp exp1','exp',2,'p_EXP','myLexerParserv2.py',1190),
  ('exp1 -> OR exp','exp1',2,'p_EXP1','myLexerParserv2.py',1196),
  ('exp1 -> empty','exp1',1,'p_EXP1','myLexerParserv2.py',1197),
  ('andexp -> boolexp andexp1','andexp',2,'p_ANDEXP','myLexerParserv2.py',1202),
  ('andexp1 -> neuraland andexp','andexp1',2,'p_ANDEXP1','myLexerParserv2.py',1208),
  ('andexp1 -> empty','andexp1',1,'p_ANDEXP1','myLexerParserv2.py',1209),
  ('neuraland -> AND','neuraland',1,'p_NEURALAND','myLexerParserv2.py',1214),
  ('boolexp -> arithexp boolexp1','boolexp',2,'p_BOOLEXP','myLexerParserv2.py',1223),
  ('boolexp1 -> neuralbool arithexp','boolexp1',2,'p_BOOLEXP1','myLexerParserv2.py',1245),
  ('boolexp1 -> empty','boolexp1',1,'p_BOOLEXP1','myLexerParserv2.py',1246),
  ('neuralbool -> GREATER','neuralbool',1,'p_NEURALBOOL','myLexerParserv2.py',1251),
  ('neuralbool -> GREATERAND','neuralbool',1,'p_NEURALBOOL','myLexerParserv2.py',1252),
  ('neuralbool -> LESSER','neuralbool',1,'p_NEURALBOOL','myLexerParserv2.py',1253),
  ('neuralbool -> LESSERAND','neuralbool',1,'p_NEURALBOOL','myLexerParserv2.py',1254),
  ('neuralbool -> SAME','neuralbool',1,'p_NEURALBOOL','myLexerParserv2.py',1255),
  ('neuralbool -> NOTSAME','neuralbool',1,'p_NEURALBOOL','myLexerParserv2.py',1256),
  ('neuralbool -> NOT','neuralbool',1,'p_NEURALBOOL','myLexerParserv2.py',1257),
  ('arithexp -> geoexp arithexp1','arithexp',2,'p_ARITHEXP','myLexerParserv2.py',1270),
  ('arithexp1 -> neuralarith arithexp','arithexp1',2,'p_ARITHEXP1','myLexerParserv2.py',1293),
  ('arithexp1 -> empty','arithexp1',1,'p_ARITHEXP1','myLexerParserv2.py',1294),
  ('neuralarith -> PLUS','neuralarith',1,'p_NEURALARITH','myLexerParserv2.py',1299),
  ('neuralarith -> REST','neuralarith',1,'p_NEURALARITH','myLexerParserv2.py',1300),
  ('geoexp -> finexp geoexp1','geoexp',2,'p_GEOEXP','myLexerParserv2.py',1310),
  ('geoexp1 -> neuralgeo geoexp','geoexp1',2,'p_GEOEXP1','myLexerParserv2.py',1331),
  ('geoexp1 -> empty','geoexp1',1,'p_GEOEXP1','myLexerParserv2.py',1332),
  ('neuralgeo -> TIMES','neuralgeo',1,'p_NEURALGEO','myLexerParserv2.py',1337),
  ('neuralgeo -> DIVIDE','neuralgeo',1,'p_NEURALGEO','myLexerParserv2.py',1338),
  ('addbottom -> LEFTPAR','addbottom',1,'p_ADDBOTTOM','myLexerParserv2.py',1348),
  ('popbottom -> RIGHTPAR','popbottom',1,'p_POPBOTTOM','myLexerParserv2.py',1355),
  ('finexp -> addbottom exp popbottom','finexp',3,'p_FINEXP','myLexerParserv2.py',1362),
  ('finexp -> cteexp','finexp',1,'p_FINEXP','myLexerParserv2.py',1363),
  ('cteexp -> CTEINT','cteexp',1,'p_CTEEXP','myLexerParserv2.py',1401),
  ('cteexp -> CTEFLOAT','cteexp',1,'p_CTEEXP','myLexerParserv2.py',1402),
  ('cteexp -> CTECHAR','cteexp',1,'p_CTEEXP','myLexerParserv2.py',1403),
  ('cteexp -> ID neuralexist paramsexp','cteexp',3,'p_CTEEXP','myLexerParserv2.py',1404),
  ('neuralexist -> <empty>','neuralexist',0,'p_NEURALEXIST','myLexerParserv2.py',1415),
  ('paramsexp -> LEFTPAR neuralera paramsexp2 neuralpar','paramsexp',4,'p_PARAMSEXP','myLexerParserv2.py',1426),
  ('paramsexp -> idarray','paramsexp',1,'p_PARAMSEXP','myLexerParserv2.py',1427),
  ('paramsexp2 -> exp neuralpar2 mulparamsexp','paramsexp2',3,'p_PARAMSEXP2','myLexerParserv2.py',1432),
  ('paramsexp2 -> empty','paramsexp2',1,'p_PARAMSEXP2','myLexerParserv2.py',1433),
  ('neuralpar -> RIGHTPAR','neuralpar',1,'p_NEURALPAR','myLexerParserv2.py',1438),
  ('neuralera -> <empty>','neuralera',0,'p_NEURALERA','myLexerParserv2.py',1459),
  ('neuralpar2 -> <empty>','neuralpar2',0,'p_NEURALPAR2','myLexerParserv2.py',1471),
  ('mulparamsexp -> COMMA exp neuralpar2 mulparamsexp','mulparamsexp',4,'p_MULPARAMSEXP','myLexerParserv2.py',1498),
  ('mulparamsexp -> empty','mulparamsexp',1,'p_MULPARAMSEXP','myLexerParserv2.py',1499),
  ('empty -> <empty>','empty',0,'p_empty','myLexerParserv2.py',1507),
]
